import sys, os, re 
from makeToolDockCategories import *
from xml.dom import minidom
from collections import Counter, OrderedDict
from itertools import groupby
        
def findMode(lst):
    maxFreq =  max(map(lst.count, lst))
    modes = [i for i in lst if lst.count(i) == maxFreq]
    return modes
    
def reformatOWS(workflowTitle,inputFile,outputFile):
    workflowPath=niceForm(workflowTitle,allowDash=False)
    doc = minidom.parse(inputFile)
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=workflowTitle
        qname=node.getAttribute('qualified_name').split('.')[-1]
        node.attributes['qualified_name'].value=workflowPath+'.'+qname+'.'+qname
    with open(outputFile,'w') as f:
        f.write(doc.toxml())

def changeNameInOWS(oldName,newName,filename):
    doc = minidom.parse(filename)
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=newName
        qnameParts=node.getAttribute('qualified_name').split('.')
        if qnameParts[0] == oldName:
            qnameParts[0]=newName;
            node.attributes['qualified_name'].value='.'.join(qnameParts)
        node.attributes['project_name'].value=newName
     
def copyWorkflow(inputWorkflow,outputWorkflow):
    #to copy workflow copy all the files and then change the titles in the ows file
    #could use global regex but then we could run into troubles when the workflow names are part of other names
    os.system('cp -r inputWorkflow outputWorkflow')
    oldName=os.path.basename(os.path.normpath(inputWorkflow))
    newName=os.path.basename(os.path.normpath(outputWorkflow))
    if newName != oldName :
        oldOWS=outputWorkflow+'/'+oldName+'.ows'
        newOWS=outputWorkflow+'/'+newName+'.ows'
        os.system('mv oldOWS newOWS')
        changeNameInOWS(oldName,newName,newOWS)
        
def findWidgetPathFromLink(qualifiedName,groupName,basePath=''):
    parts=qualifiedName.split('.')
    link=basePath+'/biodepot/'+'/'.join(parts[0:-1])+'.py'
    widgetPath=os.path.dirname((os.readlink(link)))
   #check if absolute path
    if widgetPath[0]=='/':
        absWidgetPath=widgetPath
    else:
        absWidgetPath=os.path.abspath('{}/biodepot/{}/{}'.format(basePath,groupName,widgetPath))
    return absWidgetPath

def modifyWidgetName(widgetName,projectName, projectNames):
    #tries to get a unique name when there
    #first try to add prefix if there is no prefix
    #we check against all project names to keep multiple chaining of names to a minimum
    parts=widgetName.split('_')
    if parts and parts[0] not in projectNames:
        modifiedName=projectName+'_'+widgetName
    else:
        #check last part to see if it is a number
        number=1
        if parts:
            #get rid of the .py
            lastPart=parts[-1][0:-3]
            if lastPart.isdigit():
                number=int(lastPart)+1
        modifiedName="{}_{}.py".format(widgetName[0:-3],number)
    return modifiedName
            
def exportWorkflow (bwbOWS,outputWorkflow,projectTitle,merge=False,color=None,iconFile=None,basePath=""):
    #don't let it nuke the root directories 
    if not outputWorkflow.strip('/'):
        return True
    os.system('rm -rf {}/widgets'.format(outputWorkflow))
    os.system('mkdir -p {}/widgets'.format(outputWorkflow))
    os.system('rm -rf {}/icon'.format(outputWorkflow))
    
    #first get all the widgetNames from the bwbOWS file generated by orange
    print(bwbOWS)
    doc = minidom.parse(bwbOWS)
    nodes = doc.getElementsByTagName("node")
    if not nodes:
        return False
    projectNames=[]
    widgetPaths={}
    #gather paths and order the projects names by ProjectName and then other projects by number of occurences
    #this is the order to copy/convert the names
    for node in nodes:
        projectName=node.getAttribute('project_name')
        projectPath=niceForm(projectName,allowDash=False)
        widgetName=niceForm(node.getAttribute('name'),allowDash=False)
        qname=node.getAttribute('qualified_name')
        widgetPath=findWidgetPathFromLink(qname,projectPath,basePath)
        #keep unique list of widgetPaths for each project
        if projectName not in widgetPaths:
            widgetPaths[projectName]=[]
        if widgetPaths not in widgetPaths[projectName]:
            widgetPaths[projectName].append(widgetPath)
        
        #keep track of projectNames - do not unique - want to count their occurrence and sort    
        if projectTitle != projectName:
            projectNames.append(projectName)
            
    if projectNames:
        #sort by frequency of occurence
        projectNames.sort(key=Counter(projectNames).get, reverse=True)
        #unique the list
        projectNames=list(OrderedDict.fromkeys(projectNames))
    
    if projectName in widgetPaths:
        projectNames=[projectName]+projectNames
    
    projectTitlePath=niceForm(projectTitle,allowDash=False)
    #copy the widgets
    if merge:
        #copy the widgets and make a map to update the ows file
        nameSeen=set()
        os.system('mkdir -p {}/widgets/{}'.format(outputWorkflow,projectTitlePath))
        for projectName in projectNames:
            #find uniqueName
            print(projectName)
            for widgetPath in widgetPaths[projectName]:
                print(widgetPath)
                uniqueName=os.path.basename(widgetPath)
                while widgetPath in nameSeen:
                    uniqueName=modifyWidgetName(uniqueName,projectName,projectNames)
                nameSeen.add(uniqueName)
                print ('cp -r {} {}/widgets/{}/{}'.format(widgetPath,outputWorkflow,projectTitlePath,uniqueName))
                os.system('cp -r {} {}/widgets/{}/{}'.format(widgetPath,outputWorkflow,projectTitlePath,uniqueName))
        reformatOWS(projectTitle,bwbOWS,bwbOWS)
    else:
        for projectName in projectNames:
            #copy init and icons even if empty (for case when the workflow has all widgets in other directories which is possible)
            projectPath=niceForm(projectName,allowDash=False)
            os.system('mkdir -p {}/widgets/{}'.format(outputWorkflow,projectPath))
            if(projectName != projectTitle):
                os.system('cp {}/biodepot/{}/__init__.py {}/widgets/{}/'.format(basePath,projectPath,outputWorkflow,projectPath))
                os.system('cp -r {}/biodepot/{}/icon {}/widgets/{}/'.format(basePath,projectPath,outputWorkflow,projectPath))
            for widgetPath in widgetPaths[projectName]:
                os.system('cp -r {} {}/widgets/{}'.format(widgetPath,outputWorkflow,projectPath))
    #now check projectTitle directory which could be empty
    #check if icon and __init__.py exist already - otherwise copy the User info

    os.system('mkdir -p {}/widgets/{}/icon'.format(outputWorkflow,projectTitlePath))
    
    if os.path.isdir('{}/biodepot/{}/icon'.format(basePath,projectTitlePath)):
        #the copy functions are not atomic it seems
        os.system('cp {}/biodepot/{}/icon/* {}/widgets/{}/icon/.'.format(basePath,projectTitlePath,outputWorkflow,projectTitlePath))
        os.system('cp {}/biodepot/{}/__init__.py {}/widgets/{}/.'.format(basePath,projectTitlePath,outputWorkflow,projectTitlePath)) 
    else:
        os.system('cp {}/biodepot/User/icon/* {}/widgets/{}/icon/.'.format(basePath,outputWorkflow,projectTitlePath))
        os.system('cp {}/biodepot/User/__init__.py {}/widgets/{}/.'.format(basePath,outputWorkflow,projectTitlePath))
        
    if iconFile:
        os.system('rm {}/widgets/{}/icon/*'.format(outputWorkflow,projectTitlePath))
        os.system('cp {} {}/widgets/{}/icon/.'.format(iconFile,outputWorkflow,projectTitlePath))
        
        #substitute the icon name
        iconString='ICON = "icon\\/{}"'.format(os.path.basename(iconFile))
        cmd="sed -i 's/ICON = .*/{}/g' {}/widgets/{}/__init__.py".format(iconString,outputWorkflow,projectTitlePath)
        print (cmd)
        os.system(cmd)
    if color:
        colorString='BACKGROUND = "{}"'.format(color)
        cmd="sed -i 's/BACKGROUND = .*/{}/g' {}/widgets/{}/__init__.py".format(colorString,outputWorkflow,projectTitlePath)
        os.system(cmd)

def importWorkflow(owsFile):
    changedSetup=False
    workflowDir=os.path.dirname(owsFile)
    projectTitle=os.path.basename(workflowDir)
    doc = minidom.parse(owsFile)
    nodes = doc.getElementsByTagName("node")
    with open('/biodepot/setup.py','r') as f:
        setupData=f.read()
    projectList=re.findall(r'setup\(name="([^"]+)"',setupData)
    #find base workflowName
    if not nodes:
        return
    projectNames=[]
    #copy widgets
    for node in nodes:
        #differs from export in that we want to preserve the dashes in the names for changing setup.py later
        projectName=niceForm(node.getAttribute('project_name'),allowDash=True)
        widgetName=niceForm(node.getAttribute('name'),allowDash=False)
        projectNames.append(projectName)
        projectPath=niceForm(projectName,allowDash=False)
        qname=node.getAttribute('qualified_name')
        parts=qname.split('.')
        destLink='/biodepot/'+'/'.join(parts[0:-1])+'.py'
        pythonFile='{}/widgets/{}/{}/{}.py'.format(workflowDir,projectPath,widgetName,widgetName)
        print ('mkdir -p /biodepot/{}'.format(projectPath))
        print ('ln -sf {} {}'.format(pythonFile,destLink))
        os.system('mkdir -p /biodepot/{}'.format(projectPath))
        os.system('ln -sf {} {}'.format(pythonFile,destLink))
    #update the entryname in the setup.py directory
    uniqueList=list(set(projectNames))
    for projectName in uniqueList:
        projectPath=niceForm(projectName,allowDash=False)
        os.system('rm -rf /biodepot/{}/icon'.format(projectPath))
        os.system('cp -r {}/widgets/{}/icon  /biodepot/{} '.format(workflowDir,projectPath,projectPath))
        os.system('cp  {}/widgets/{}/__init__.py  /biodepot/{}/.'.format(workflowDir,projectPath,projectPath))
        if projectName not in  projectList:
            setupData+=entryString(projectName,projectPath)
            changedSetup=True
    if projectTitle not in uniqueList:
        projectPath=niceForm(projectTitle,allowDash=False)
        os.system('mkdir -p /biodepot/{}'.format(projectPath))
        os.system('rm -rf /biodepot/{}/icon'.format(projectPath))
        os.system('cp -r {}/widgets/{}/icon  /biodepot/{} '.format(workflowDir,projectPath,projectPath))
        os.system('cp  {}/widgets/{}/__init__.py  /biodepot/{}/.'.format(workflowDir,projectPath,projectPath))
        if projectTitle not in  projectList:
            setupData+=entryString(projectTitle,projectPath)
            changedSetup=True
            
    if changedSetup:
        with open('/biodepot/setup.py','w') as f:
            f.write(setupData)
        os.system('cd /biodepot && pip install -e .')


