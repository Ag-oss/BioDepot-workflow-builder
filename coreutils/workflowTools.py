import sys, os, re 
from makeToolDockCategories import *
from xml.dom import minidom
from collections import Counter, OrderedDict
from itertools import groupby
        
        
def findMode(lst):
    maxFreq =  max(map(lst.count, lst))
    modes = [i for i in lst if lst.count(i) == maxFreq]
    return modes
    
def reformatOWS(workflowTitle,inputFile,outputFile):
    workflowPath=niceForm(workflowTitle,allowDash=False)
    doc = minidom.parse(inputFile)
    scheme = doc.getElementsByTagName("scheme")[0]
    scheme.attributes['title'].value=workflowTitle
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=workflowTitle
        qname=node.getAttribute('qualified_name').split('.')[-1]
        node.attributes['qualified_name'].value=workflowPath+'.'+qname+'.'+qname
    with open(outputFile,'w') as f:
        f.write(doc.toxml())

def changeNameInOWS(oldName,newName,filename):
    doc = minidom.parse(filename)
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=newName
        qnameParts=node.getAttribute('qualified_name').split('.')
        if qnameParts[0] == oldName:
            qnameParts[0]=newName;
            node.attributes['qualified_name'].value='.'.join(qnameParts)
        node.attributes['project_name'].value=newName
     
def copyWorkflow(inputWorkflow,outputWorkflow):
    #to copy workflow copy all the files and then change the titles in the ows file
    #could use global regex but then we could run into troubles when the workflow names are part of other names
    os.system('cp -r inputWorkflow outputWorkflow')
    oldName=os.path.basename(os.path.normpath(inputWorkflow))
    newName=os.path.basename(os.path.normpath(outputWorkflow))
    if newName != oldName :
        oldOWS=outputWorkflow+'/'+oldName+'.ows'
        newOWS=outputWorkflow+'/'+newName+'.ows'
        os.system('mv oldOWS newOWS')
        changeNameInOWS(oldName,newName,newOWS)
        
def findWidgetPathFromLink(qualifiedName,groupName,basePath=''):
    parts=qualifiedName.split('.')
    link=basePath+'/biodepot/'+'/'.join(parts[0:-1])+'.py'
    widgetPath=os.path.dirname((os.readlink(link)))
   #check if absolute path
    if widgetPath[0]=='/':
        absWidgetPath=widgetPath
    else:
        absWidgetPath=os.path.abspath('{}/biodepot/{}/{}'.format(basePath,groupName,widgetPath))
    return absWidgetPath

def modifyWidgetName(widgetName,projectName, projectNames):
    #tries to get a unique name when there
    #first try to add prefix if there is no prefix
    #we check against all project names to keep multiple chaining of names to a minimum
    parts=widgetName.split('_')
    if parts and parts[0] not in projectNames:
        modifiedName=projectName+'_'+widgetName
    else:
        #check last part to see if it is a number
        number=1
        if parts:
            #get rid of the .py
            lastPart=parts[-1][0:-3]
            if lastPart.isdigit():
                number=int(lastPart)+1
        modifiedName="{}_{}.py".format(widgetName[0:-3],number)
    return modifiedName
            
def exportWorkflow (bwbOWS,outputWorkflow,projectTitle,merge=False,color=None,iconFile=None,basePath=""):
    projectTitlePath=niceForm(projectTitle,allowDash=False)
    if merge:
        #don't let it nuke the root directories 
        if not outputWorkflow.strip('/'):
            return True
        os.system('rm -rf {}/widgets'.format(outputWorkflow))
        os.system('mkdir -p {}/widgets'.format(outputWorkflow))
    
    #first get all the widgetNames from the bwbOWS file generated by orange
        print(bwbOWS)
        doc = minidom.parse(bwbOWS)
        nodes = doc.getElementsByTagName("node")
        if not nodes:
            return False
        projectNames=[]
        widgetPaths={}
        #gather paths and order the projects names by ProjectName and then other projects by number of occurences
        #this is the order to copy/convert the names
        for node in nodes:
            projectName=node.getAttribute('project_name')
            projectPath=niceForm(projectName,allowDash=False)
            widgetName=niceForm(node.getAttribute('name'),allowDash=False)
            qname=node.getAttribute('qualified_name')
            widgetPath=findWidgetPathFromLink(qname,projectPath,basePath)
        #keep unique list of widgetPaths for each project
            if projectName not in widgetPaths:
                widgetPaths[projectName]=[]
            if widgetPaths not in widgetPaths[projectName]:
                widgetPaths[projectName].append(widgetPath)
        
        #keep track of projectNames - do not unique - want to count their occurrence and sort    
            if projectTitle != projectName:
                projectNames.append(projectName)
            
        if projectNames:
            #sort by frequency of occurence
            projectNames.sort(key=Counter(projectNames).get, reverse=True)
            #unique the list
            projectNames=list(OrderedDict.fromkeys(projectNames))
    
        if projectName in widgetPaths:
            projectNames=[projectName]+projectNames
    

        #copy the widgets
        nameSeen=set()
        os.system('mkdir -p {}/widgets/{}'.format(outputWorkflow,projectTitlePath))
        for projectName in projectNames:
            #find uniqueName
            print(projectName)
            for widgetPath in widgetPaths[projectName]:
                print(widgetPath)
                uniqueName=os.path.basename(widgetPath)
                while widgetPath in nameSeen:
                    uniqueName=modifyWidgetName(uniqueName,projectName,projectNames)
                nameSeen.add(uniqueName)
                print ('cp -r {} {}/widgets/{}/{}'.format(widgetPath,outputWorkflow,projectTitlePath,uniqueName))
                os.system('cp -r {} {}/widgets/{}/{}'.format(widgetPath,outputWorkflow,projectTitlePath,uniqueName))
        reformatOWS(projectTitle,bwbOWS,bwbOWS)
    #now check projectTitle directory which could be empty
    #check if icon and __init__.py exist already - otherwise copy the User info
    
    #make sure that there is __init__.py
    changedIcon=False
    initFile='{}/widgets/{}/__init__.py'.format(outputWorkflow,projectTitlePath)
    if not os.path.exists(initFile):
        os.system('cp  /biodepot/User/__init__.py {}'.format(initFile))
        if not color:
            color='light-blue'
        changedIcon=True
    

    iconDir='{}/widgets/{}/icon'.format(outputWorkflow,projectTitlePath)

    #check that iconFile exists and resolve if symlink
    if iconFile:
        if not os.path.exists(iconFile):
            iconFile=""
        else:
            iconFile=os.path.realpath(iconFile)
            if not os.path.isfile(iconFile):
                iconFile=""
    #if there is no icon 
    print ('iconFile is ' + str(iconFile))
    if not os.path.isdir(iconDir):
        if not iconFile:
            #see if it exists already in toolbox
            if os.path.exists('{}/biodepot/{}/icon'.format(basePath,projectTitlePath)):
                existingIcon=os.path.realpath('{}/biodepot/{}/icon'.format(basePath,projectTitlePath))
                print ('copy existing '+'cp -r {} {}/widgets/{}/.'.format(existingIcon,outputWorkflow,projectTitlePath))
                os.system('cp -r {} {}/widgets/{}/.'.format(existingIcon,outputWorkflow,projectTitlePath))
            else:
                print ('copy User '+'cp -r /biodepot/User/icon {}/widgets/{}/.'.format(outputWorkflow,projectTitlePath))
                os.system('cp -r /biodepot/User/icon {}/widgets/{}/.'.format(outputWorkflow,projectTitlePath))
        else:
            print ('mkdir -p {} && cp {} {} '.format(iconDir,iconFile,iconDir))
            os.system('mkdir -p {} && cp {} {} '.format(iconDir,iconFile,iconDir))
        changedIcon=True 
    else:
        #if there already is an icon file leave it unchanged if no iconFile
        if iconFile:
            print ('rm -rf {} && mkdir -p {} && cp {} {} '.format(iconDir,iconDir,iconFile,iconDir))
            os.system('rm -rf {} && mkdir -p {} && cp {} {} '.format(iconDir,iconDir,iconFile,iconDir))
            changeIcon=True

    if changedIcon or color:
        with open(initFile,'r') as f:
            lines = f.readlines()
        with open(initFile,'w') as f:
            for line in lines:
                if changedIcon and line[0:4] == 'ICON':
                    iconPath=str(os.popen('ls {}'.format(iconDir)).read()[0])
                    line='ICON = "icon/{}"\n'.format(os.path.basename(iconPath))
                elif color and line[0:10] == 'BACKGROUND':
                    line='BACKGROUND = "{}"\n'.format(color)
                f.write(line)
    

def importWorkflow(owsFile):
    changedSetup=False
    workflowDir=os.path.dirname(owsFile)
    projectTitlePath=os.path.basename(workflowDir)
    os.system('mkdir -p /biodepot/{}'.format(projectTitlePath))

    with open('/biodepot/setup.py','r') as f:
        setupData=f.read()
    projectList=re.findall(r'setup\(name="([^"]+)"',setupData)
    changedSetup=True
    for projectName in projectList:
        projectPath=niceForm(projectName,allowDash=False)
        if projectPath == projectTitlePath:
            changedSetup=False
            break
    if changedSetup:
        setupData+=entryString(projectTitlePath,projectTitlePath)
        
    doc = minidom.parse(owsFile)
    nodes = doc.getElementsByTagName("node")        
    if not nodes:
        return
    #make links to widgets
    for node in nodes:
        #differs from export in that we want to preserve the dashes in the names for changing setup.py later
        projectPath=niceForm(node.getAttribute('project_name'),allowDash=False)
        #only care about the ones specific to this workflow
        if projectPath == projectTitlePath:
            widgetName=niceForm(node.getAttribute('name'),allowDash=False)
            qname=node.getAttribute('qualified_name')
            parts=qname.split('.')
            destLink='/biodepot/'+'/'.join(parts[0:-1])+'.py'
            pythonFile='{}/widgets/{}/{}/{}.py'.format(workflowDir,projectPath,widgetName,widgetName)
            os.system('ln -sf {} {}'.format(pythonFile,destLink))
    #make link to icons and __init__.py
    os.system('ln -sf {}/widgets/{}/icon /biodepot/{}/icon'.format(workflowDir,projectTitlePath,projectTitlePath))
    os.system('ln -sf {}/widgets/{}/__init__.py /biodepot/{}/__init__.py'.format(workflowDir,projectTitlePath,projectTitlePath))
    if changedSetup:
        with open('/biodepot/setup.py','w') as f:
            f.write(setupData)
        os.system('cd /biodepot && pip install -e .')


