#!/usr/bin/env python3
import sys, os, re 
from makeToolDockCategories import *
from xml.dom import minidom

def findWidgetsInOWS(owsFile):
    with open(owsFile,'r') as f:
        ows=f.read()
        matches=re.findall(r'qualified_name="(.*?)"',ows)
        return set(matches)

def copyWidgets(widgets,workflowPath,basePath=''):
    #this routine assumes that all widget names are unique which is only true within a workflow or the base widget group
    for widget in widgets:
        #find path to link
        #follow link to find where the actual python script resides
        #copy the parent directory
        widgetParts=widget.split('.')
        pylink='{}/biodepot/{}/{}.py'.format(basePath,widgetParts[0],widgetParts[1])
        target=os.readlink(pylink)
        targetParts=target.split('/')
        widgetName=targetParts[-2]
        destPath='{}/widgets/{}'.format(workflowPath,widgetName)
        if not os.path.exists(destPath):
            sys.stderr.write('cp -r {}/widgets/{} {}\n'.format(basePath,widgetName,destPath))
            os.system('cp -r {}/widgets/{} {}'.format(basePath,widgetName,destPath))

    
def reformatOWS(workflowName,inputFile,outputFile):
    doc = minidom.parse(inputFile)
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=workflowName
        qname=node.getAttribute('qualified_name').split('.')[-1]
        node.attributes['qualified_name'].value=workflowName+'.'+qname+'.'+qname
    with open(outputFile,'w') as f:
        f.write(doc.toxml())

def changeNameInOWS(oldName,newName,filename):
    doc = minidom.parse(filename)
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=newName
        qnameParts=node.getAttribute('qualified_name').split('.')
        if qnameParts[0] == oldName:
            qnameParts[0]=newName;
            node.attributes['qualified_name'].value='.'.join(qnameParts)
        node.attributes['project_name'].value=newName
     
def copyWorkflow(inputWorkflow,outputWorkflow):
    #to copy workflow copy all the files and then change the titles in the ows file
    #could use global regex but then we could run into troubles when the workflow names are part of other names
    os.system('cp -r inputWorkflow outputWorkflow')
    oldName=os.path.basename(os.path.normpath(inputWorkflow)
    newName= (os.path.basename(os.path.normpath(outputWorkflow)
    if newName != oldName :
        oldOWS=outputWorkflow+'/'+oldName+'.ows'
        newOWS=outputWorkflow+'/'+newName+'.ows'
        os.system('mv oldOWS newOWS')
        changeNameInOWS(oldName,newName,newOWS)

def exportWorkflow (bwbOWS,outputWorkflow,basePath=""):
    os.system('mkdir -p outputWorkflow/widgets')
    os.system('mkdir -p outputWorkflow/icon')
    #first get all the widgetNames from the bwbOWS file generated by orange
    doc = minidom.parse(filename)
    nodes = doc.getElementsByTagName("node")
    #find base workflowName
    if not nodes:
        return
    oldName=nodes[0].getAttribute('project_name')
    for node in nodes:
        qnameParts=node.getAttribute('qualified_name').split('.')
        projectName=qnameParts[0]
        if projectName == oldName:
            pylink='{}/biodepot/{}/{}.py'.format(basePath,,widgetName)
            target=os.readlink(pylink)
            #copy the widget into new widgets
            pass
        if qnameParts[0] == oldProjectName:
            qnameParts[0]=newName;
            node.attributes['qualified_name'].value='.'.join(qnameParts)
    
    #this is a bit more difficult
    #will assume that all the widgets within a group with the same qualified name are the same widget
    #will check other widgets from another group to see if they are the same - if not then add the workflowName to the widget - if still the same then add widgetName to it which is guaranteed to be different
    

def makeWorkflow(workflowName,directory,owsFile,basePath='',copyOWS=False,reformat=False):
    workflowPath= '{}/{}'.format(directory,workflowName)
 
    #os.system('mkdir -p {}'.format(workflowPath))
    #os.system('mkdir -p {}/widgets'.format(workflowPath))
    #widgets=findWidgetsInOWS(owsFile)
    #copyWidgets(widgets,workflowPath,basePath=basePath)
    reformatOWS(workflowName,owsFile,'./testfile.ows')
    #os.system('cp {} {}/{}.ows'.format(owsFile,workflowPath,workflowName))

makeWorkflow('dToxSDemo2','./','./Demo_DtoxS.ows',basePath='/media/data/home/lhhung/bwb/BioDepot-workflow-builder',reformat=True)
