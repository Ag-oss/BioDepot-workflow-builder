#!/usr/bin/env python3
import sys, os, re 
from makeToolDockCategories import *
from xml.dom import minidom
from collections import Counter
from itertools import groupby

        
def findMode(lst):
    maxFreq =  max(map(lst.count, lst))
    modes = [i for i in lst if lst.count(i) == maxFreq]
    return modes
    

    
def reformatOWS(workflowName,inputFile,outputFile):
    doc = minidom.parse(inputFile)
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=workflowName
        qname=node.getAttribute('qualified_name').split('.')[-1]
        node.attributes['qualified_name'].value=workflowName+'.'+qname+'.'+qname
    with open(outputFile,'w') as f:
        f.write(doc.toxml())

def changeNameInOWS(oldName,newName,filename):
    doc = minidom.parse(filename)
    nodes = doc.getElementsByTagName("node")
    for node in nodes:
        node.attributes['project_name'].value=newName
        qnameParts=node.getAttribute('qualified_name').split('.')
        if qnameParts[0] == oldName:
            qnameParts[0]=newName;
            node.attributes['qualified_name'].value='.'.join(qnameParts)
        node.attributes['project_name'].value=newName
     
def copyWorkflow(inputWorkflow,outputWorkflow):
    #to copy workflow copy all the files and then change the titles in the ows file
    #could use global regex but then we could run into troubles when the workflow names are part of other names
    os.system('cp -r inputWorkflow outputWorkflow')
    oldName=os.path.basename(os.path.normpath(inputWorkflow))
    newName=os.path.basename(os.path.normpath(outputWorkflow))
    if newName != oldName :
        oldOWS=outputWorkflow+'/'+oldName+'.ows'
        newOWS=outputWorkflow+'/'+newName+'.ows'
        os.system('mv oldOWS newOWS')
        changeNameInOWS(oldName,newName,newOWS)
        
def findWidgetPathFromLink(qualifiedName,groupName,basePath=''):
    parts=qualifiedName.split('.')
    link=basePath+'/biodepot'+'/'+'/'.join(parts[0:-1])+'.py'
    widgetPath=os.path.dirname((os.readlink(link)))
   #check if absolute path
    if widgetPath[0]=='/':
        absWidgetPath=widgetPath
    else:
        absWidgetPath=os.path.abspath('{}/biodepot/{}/{}'.format(basePath,groupName,widgetPath))
    return absWidgetPath

        
def exportWorkflow (bwbOWS,outputWorkflow,basePath=""):
    os.system('rm -rf {}/widgets'.format(outputWorkflow))
    os.system('mkdir -p {}/widgets'.format(outputWorkflow))
    os.system('rm -rf {}/icon'.format(outputWorkflow))
    #first get all the widgetNames from the bwbOWS file generated by orange
    print(bwbOWS)
    doc = minidom.parse(bwbOWS)
    nodes = doc.getElementsByTagName("node")
    #find base workflowName
    if not nodes:
        return
    projectNames=[]
    #copy widgets
    for node in nodes:
        projectName=node.getAttribute('project_name')
        widgetName=node.getAttribute('widgetName')
        projectNames.append(projectName)
        qname=node.getAttribute('qualified_name')
        print(qname)
        widgetPath=findWidgetPathFromLink(qname,projectName,basePath)
        print (widgetPath)
        os.system('mkdir -p {}/widgets/{}'.format(outputWorkflow,projectName))
        os.system('cp -r {} {}/widgets/{}'.format(widgetPath,outputWorkflow,projectName))
   
    #copy icons and info in setup.py
    
    projectMode=findMode(projectNames)[0]
    #use most common project found to determine the icon and init.py
    
    #convert any - to _  dashes are not allowed in Python names so we leave them out of paths but we keep them for the sake of terms like RNA-seq
    projectMode=projectMode.replace('-','_')
    print ('cp -r {}/biodepot/{}/icon {}'.format(basePath,projectMode,outputWorkflow))
    os.system('cp -r {}/biodepot/{}/icon {}'.format(basePath,projectMode,outputWorkflow))
    os.system('cp {}/biodepot/{}/__init__.py {}'.format(basePath,projectMode,outputWorkflow))
    
    print(projectMode)


def makeWorkflow(workflowName,directory,owsFile,basePath='',copyOWS=False,reformat=False):
    workflowPath= '{}/{}'.format(directory,workflowName)
 
    #os.system('mkdir -p {}'.format(workflowPath))
    #os.system('mkdir -p {}/widgets'.format(workflowPath))
    #widgets=findWidgetsInOWS(owsFile)
    #copyWidgets(widgets,workflowPath,basePath=basePath)
    reformatOWS(workflowName,owsFile,'./testfile.ows')
    #os.system('cp {} {}/{}.ows'.format(owsFile,workflowPath,workflowName))

exportWorkflow('./test.ows','./newWorkflow','/media/data/home/lhhung/bwb/BioDepot-workflow-builder/')
